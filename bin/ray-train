#!/usr/bin/env python

# Python standard library
import sys, os, argparse, cPickle
import subprocess as sp
import logging

# external libraries
from numpy import unique
from skimage import morphology as skmorph
from scipy.ndimage import label

# local modules
from ray import imio, agglo, morpho, classify, evaluate

if __name__ == '__main__':


    parser = argparse.ArgumentParser(
        description='Train a classifier for agglomerative segmentation.')
    parser.add_argument('fin', nargs=2,
        help='The boundary probability map and gold standard segmentation ' +\
        'files. Supported formats are png/tiff/jpeg stacks, .h5 files ' +\
        'group "stack" is assumed), _boundpred.h5 Ilastik batch prediction '+\
        'files (group "/volume/prediction" is assumed), and Raveler export '+\
        'directories.')
    parser.add_argument('-I', '--remove-inclusions', action='store_true',
        default=False, 
        help='Remove inclusions before training and before output.')
    parser.add_argument('-L', '--learning-mode', metavar='MODE', 
        default='strict',
        help='Set the learning mode (strict or loose).')
    parser.add_argument('-l', '--labeling-mode', metavar='MODE', 
        default='assignment',
        help='Set the labeling mode (assignment, voi-sign, or rand-sign).')
    parser.add_argument('-p', '--priority-mode', default='active',
        metavar='MODE',
        help='Set the priority mode during learning (default: %(default)s).')
    parser.add_argument('-m', '--no-memory', action='store_false', default=True,
        help='Don\'t remember all training epochs.', dest="memory")
    parser.add_argument('-u', '--no-unique', action='store_false', default=True,
        help='Allow use of repeated training examples.', dest="unique")
    parser.add_argument('-f', '--no-learn-flat', action='store_false',
        default=True,
        help='Don\'t perform a flat region adjacency graph learning to begin.',
        dest="learn_flat" )
    parser.add_argument('-e', '--num-epochs', type=int, metavar='UINT',
        default=5, help='Set the number of epochs of training to run ' +\
        '(default: %(default)s).')
    parser.add_argument('-n', '--min-num-examples', type=int, metavar='UINT',
        default=1, help='Set the minimum number of training examples.')
    parser.add_argument('-N', '--num-examples', type=int, metavar='UINT',
        default=None, help='Set the sampled number of training examples.')
    parser.add_argument('-F', '--feature-manager', metavar='PY_STR',
        default='classify.CompositeFeatureManager(children=' +\
            '[classify.MomentsFeatureManager(), ' +\
            'classify.HistogramFeatureManager(25, 0, 1, [0.1, 0.5, 0.9])]' +\
            ')',
        help='Specify the feature manager you would like to use.')
    parser.add_argument('-E', '--training-data-extension', metavar='EXT',
        default='.trdat.h5',
        help='The filename extension for the training data.')
    parser.add_argument('-c', '--classifier-extension', metavar='EXT',
        default='.rf.h5',
        help='The filename extension for the saved classifier.')
    parser.add_argument('-P', '--show-progress', action='store_true', 
        default=False, help='Show a progress bar.')
    parser.add_argument('-v', '--verbose', action='store_true', default=False,
        help='Print runtime information about execution.')
    parser.add_argument('-Z', '--nozeros', action='store_false', 
        default=True, help='Disable nozeros mode.')
    parser.add_argument('--output_dir', type=str,
        help="Directory for all output", default='./', dest='output_dir')
    parser.add_argument('--experiment_name', type=str, 
        help="Name of the experiment -- will be used as the base name for all outputs",
        dest='experiment_name', required=True)
    args = parser.parse_args()

    experiment_prefix = args.output_dir + "/" + args.experiment_name

    MasterLogger = logging.getLogger('pipeline')
    MasterLogger.propagate = False
    MasterLogger.setLevel(logging.DEBUG)
    console = logging.StreamHandler(sys.stdout)
    console.setLevel(logging.INFO)
    
    formatter = logging.Formatter('%(levelname)-8s %(message)s')
    console.setFormatter(formatter)
    MasterLogger.addHandler(console)

    if not os.path.exists(args.output_dir):
        os.makedirs(args.output_dir)

    dname, fname = os.path.split(args.experiment_name)

    if dname != "":
        MasterLogger.error("Experiment name cannot be a path")
        sys.exit(1)    

    prim = logging.FileHandler(experiment_prefix + ".ray-train.log", 'a')
    prim.setLevel(logging.DEBUG)
    prim.setFormatter(logging.Formatter(fmt='%(asctime)s %(levelname)-8s %(message)s', datefmt='%m-%d-%y %H:%M'))
    MasterLogger.addHandler(prim)

    MasterLogger.info("Script called: " + ' '.join(sys.argv))
    MasterLogger.info("Script run from: " + os.path.realpath('.'))





 

    p, gs = map(imio.read_image_stack, args.fin)
    gs = evaluate.relabel_from_one(gs)[0]
    MasterLogger.info("Performing watershed")
    ws = skmorph.watershed(p, label(p==0)[0])
    fm = eval(args.feature_manager, {}, {'classify': classify})
    MasterLogger.info("Building RAG")
    g = agglo.Rag(ws, p, feature_manager=fm, show_progress=args.show_progress,
            nozeros=args.nozeros)
    MasterLogger.info("Starting inclusion removal" + " with " + str(g.number_of_nodes()) + " nodes")
    g.remove_inclusions()
    MasterLogger.info("Finished removing inclusions with " + str(g.number_of_nodes()) + " nodes")
    MasterLogger.info("Learning epochs")
    d, epochs = g.learn_agglomerate(gs, fm, args.min_num_examples, 
        learn_flat=args.learn_flat, learning_mode=args.learning_mode,
        labeling_mode=args.labeling_mode, priority_mode=args.priority_mode,
        memory=args.memory, unique=args.unique, min_num_epochs=args.num_epochs)
    current_directory = os.path.realpath('.')
    os.chdir(os.path.dirname(classify.__file__))
    git_commit = sp.check_output(['git', 'log', '-n', '1']).split('\n')[0]\
                 .split()[1]
    git_stamp = 'commit ' + git_commit if \
        sp.check_output(['git', 'status']).split('\n').count(
        'nothing to commit (working directory clean)') == 1 else \
        'uncommitted changes from ' + git_commit
    MasterLogger.debug(git_stamp)
    os.chdir(current_directory)
    info_string = '\n'.join(args.fin + [args.feature_manager, git_stamp])
    MasterLogger.info("Saving training data to disk")
    classify.save_training_data_to_disk(d, 
        experiment_prefix + args.training_data_extension, info=info_string)
    for i, epoch in enumerate(epochs):
        classify.save_training_data_to_disk(epoch, 
            experiment_prefix + args.training_data_extension + '.' + str(i),
            info=info_string)
    MasterLogger.info("Training classifier")
    rf = classify.RandomForest().fit(d[0], d[1][:,0], args.num_examples)
    MasterLogger.info("Saving classifier to disk")
    rf.save_to_disk(experiment_prefix + args.classifier_extension)
