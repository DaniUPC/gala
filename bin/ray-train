#!/usr/bin/env python

# Python standard library
import sys, os, argparse, cPickle
import subprocess as sp

# external libraries
from numpy import unique
from skimage import morphology as skmorph
from scipy.ndimage import label

# local modules
from ray import imio, agglo, morpho, classify, evaluate

if __name__ == '__main__':
    parser = argparse.ArgumentParser(
        description='Train a classifier for agglomerative segmentation.')
    parser.add_argument('fin', nargs=2,
        help='The boundary probability map and gold standard segmentation ' +\
        'files. Supported formats are png/tiff/jpeg stacks, .h5 files ' +\
        'group "stack" is assumed), _processed.h5 Ilastik batch prediction '+\
        'files (group "/volume/prediction" is assumed), and Raveler export '+\
        'directories.')
    parser.add_argument('fout', 
        help='The output filename for the training examples and classifier. '+\
        'Output format is a set of .h5 files.')
    parser.add_argument('-I', '--remove-inclusions', action='store_true',
        default=False, 
        help='Remove inclusions before training and before output.')
    parser.add_argument('-L', '--learning-mode', default='strict',
        help='Set the learning mode (strict or loose).')
    parser.add_argument('-l', '--labeling-mode', default='assignment',
        help='Set the labeling mode (assignment, voi-sign, or rand-sign).')
    parser.add_argument('-p', '--priority-mode', default='active',
        metavar='STRING',
        help='Set the priority mode during learning (default: %(default)s).')
    parser.add_argument('-m', '--memory', default=True,
        help='Remember all training epochs.')
    parser.add_argument('-u', '--unique', default=True,
        help='Do not use repeated examples.')
    parser.add_argument('-f', '--learn-flat', action='store_true', default=True,
        help='Learn from the flat region adjacency graph to begin.')
    parser.add_argument('-e', '--num-epochs', type=int, metavar='UINT',
        default=5, help='Set the number of epochs of training to run ' +\
        '(default: %(default)s).')
    parser.add_argument('-n', '--num-examples', type=int, metavar='UINT',
        default=1, help='Set the minimum number of training examples.')
    parser.add_argument('-F', '--feature-manager',
        default='classify.CompositeFeatureManager(children=' +\
            '[classify.MomentsFeatureManager(), ' +\
            'classify.HistogramFeatureManager(25, 0, 1, [0.1, 0.5, 0.9])]' +\
            ')',
        help='Specify the feature manager you would like to use.')
    parser.add_argument('-E', '--training-data-extension', default='.trdat.h5',
        help='The filename extension for the training data.')
    parser.add_argument('-c', '--classifier-extension', default='.rf.h5',
        help='The filename extension for the saved classifier.')
    parser.add_argument('-P', '--show-progress', action='store_true', 
        default=False, help='Show a progress bar.')
    parser.add_argument('-v', '--verbose', action='store_true', default=False,
        help='Print runtime information about execution.')
    args = parser.parse_args()

    p, gs = map(imio.read_image_stack, args.fin)
    gs = evaluate.relabel_from_one(gs)[0]
    ws = skmorph.watershed(p, label(p==0)[0])
    fm = eval(args.feature_manager, {}, {'classify': classify})
    g = agglo.Rag(ws, p, feature_manager=fm, show_progress=args.show_progress)
    g.remove_inclusions()
    d, epochs = g.learn_agglomerate(gs, fm, args.num_examples, 
        learn_flat=args.learn_flat, learning_mode=args.learning_mode,
        labeling_mode=args.labeling_mode, priority_mode=args.priority_mode,
        memory=args.memory, unique=args.unique, min_num_epochs=args.num_epochs)
    current_directory = os.path.realpath('.')
    os.chdir(os.path.dirname(classify.__file__))
    git_commit = sp.check_output(['git', 'log', '-n', '1']).split('\n')[0]\
                 .split()[1]
    git_stamp = 'commit ' + git_commit if \
        sp.check_output(['git', 'status']).split('\n').count(
        'nothing to commit (working directory clean)') == 1 else \
        'uncommitted changes from ' + git_commit
    os.chdir(current_directory)
    info_string = '\n'.join(args.fin + [args.feature_manager, git_stamp])
    classify.save_training_data_to_disk(d, 
        args.fout + args.training_data_extension, info=info_string)
    for i, epoch in enumerate(epochs):
        classify.save_training_data_to_disk(epoch, 
            args.fout + args.training_data_extension + '.' + str(i),
            info=info_string)
    rf = classify.RandomForest().fit(d[0], d[1][:,0])
    rf.save_to_disk(args.fout + args.classifier_extension)
